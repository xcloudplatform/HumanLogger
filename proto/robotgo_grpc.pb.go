// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: robotgo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RobotGoClient is the client API for RobotGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotGoClient interface {
	MoveSmooth(ctx context.Context, in *MoveSmoothRequest, opts ...grpc.CallOption) (*MoveSmoothResponse, error)
	MoveRelative(ctx context.Context, in *MoveRelativeRequest, opts ...grpc.CallOption) (*MoveRelativeResponse, error)
	MoveSmoothRelative(ctx context.Context, in *MoveSmoothRelativeRequest, opts ...grpc.CallOption) (*MoveSmoothRelativeResponse, error)
	GetMousePos(ctx context.Context, in *GetMousePosRequest, opts ...grpc.CallOption) (*GetMousePosResponse, error)
	Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error)
	Scroll(ctx context.Context, in *ScrollRequest, opts ...grpc.CallOption) (*ScrollResponse, error)
	ScrollMouse(ctx context.Context, in *ScrollMouseRequest, opts ...grpc.CallOption) (*ScrollMouseResponse, error)
	ScrollSmooth(ctx context.Context, in *ScrollSmoothRequest, opts ...grpc.CallOption) (*ScrollSmoothResponse, error)
	ScrollRelative(ctx context.Context, in *ScrollRelativeRequest, opts ...grpc.CallOption) (*ScrollRelativeResponse, error)
	MilliSleep(ctx context.Context, in *MilliSleepRequest, opts ...grpc.CallOption) (*MilliSleepResponse, error)
	Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error)
	CaptureScreen(ctx context.Context, in *CaptureScreenRequest, opts ...grpc.CallOption) (*CaptureScreenResponse, error)
	CaptureGo(ctx context.Context, in *CaptureGoRequest, opts ...grpc.CallOption) (*CaptureGoResponse, error)
	CaptureImg(ctx context.Context, in *CaptureImgRequest, opts ...grpc.CallOption) (*CaptureImgResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	DragSmooth(ctx context.Context, in *DragSmoothRequest, opts ...grpc.CallOption) (*DragSmoothResponse, error)
}

type robotGoClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotGoClient(cc grpc.ClientConnInterface) RobotGoClient {
	return &robotGoClient{cc}
}

func (c *robotGoClient) MoveSmooth(ctx context.Context, in *MoveSmoothRequest, opts ...grpc.CallOption) (*MoveSmoothResponse, error) {
	out := new(MoveSmoothResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/MoveSmooth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) MoveRelative(ctx context.Context, in *MoveRelativeRequest, opts ...grpc.CallOption) (*MoveRelativeResponse, error) {
	out := new(MoveRelativeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/MoveRelative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) MoveSmoothRelative(ctx context.Context, in *MoveSmoothRelativeRequest, opts ...grpc.CallOption) (*MoveSmoothRelativeResponse, error) {
	out := new(MoveSmoothRelativeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/MoveSmoothRelative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) GetMousePos(ctx context.Context, in *GetMousePosRequest, opts ...grpc.CallOption) (*GetMousePosResponse, error) {
	out := new(GetMousePosResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/GetMousePos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error) {
	out := new(ClickResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/Click", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) Scroll(ctx context.Context, in *ScrollRequest, opts ...grpc.CallOption) (*ScrollResponse, error) {
	out := new(ScrollResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/Scroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) ScrollMouse(ctx context.Context, in *ScrollMouseRequest, opts ...grpc.CallOption) (*ScrollMouseResponse, error) {
	out := new(ScrollMouseResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/ScrollMouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) ScrollSmooth(ctx context.Context, in *ScrollSmoothRequest, opts ...grpc.CallOption) (*ScrollSmoothResponse, error) {
	out := new(ScrollSmoothResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/ScrollSmooth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) ScrollRelative(ctx context.Context, in *ScrollRelativeRequest, opts ...grpc.CallOption) (*ScrollRelativeResponse, error) {
	out := new(ScrollRelativeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/ScrollRelative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) MilliSleep(ctx context.Context, in *MilliSleepRequest, opts ...grpc.CallOption) (*MilliSleepResponse, error) {
	out := new(MilliSleepResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/MilliSleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error) {
	out := new(SleepResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) CaptureScreen(ctx context.Context, in *CaptureScreenRequest, opts ...grpc.CallOption) (*CaptureScreenResponse, error) {
	out := new(CaptureScreenResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/CaptureScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) CaptureGo(ctx context.Context, in *CaptureGoRequest, opts ...grpc.CallOption) (*CaptureGoResponse, error) {
	out := new(CaptureGoResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/CaptureGo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) CaptureImg(ctx context.Context, in *CaptureImgRequest, opts ...grpc.CallOption) (*CaptureImgResponse, error) {
	out := new(CaptureImgResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/CaptureImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotGoClient) DragSmooth(ctx context.Context, in *DragSmoothRequest, opts ...grpc.CallOption) (*DragSmoothResponse, error) {
	out := new(DragSmoothResponse)
	err := c.cc.Invoke(ctx, "/protobuf.RobotGo/DragSmooth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotGoServer is the server API for RobotGo service.
// All implementations must embed UnimplementedRobotGoServer
// for forward compatibility
type RobotGoServer interface {
	MoveSmooth(context.Context, *MoveSmoothRequest) (*MoveSmoothResponse, error)
	MoveRelative(context.Context, *MoveRelativeRequest) (*MoveRelativeResponse, error)
	MoveSmoothRelative(context.Context, *MoveSmoothRelativeRequest) (*MoveSmoothRelativeResponse, error)
	GetMousePos(context.Context, *GetMousePosRequest) (*GetMousePosResponse, error)
	Click(context.Context, *ClickRequest) (*ClickResponse, error)
	Scroll(context.Context, *ScrollRequest) (*ScrollResponse, error)
	ScrollMouse(context.Context, *ScrollMouseRequest) (*ScrollMouseResponse, error)
	ScrollSmooth(context.Context, *ScrollSmoothRequest) (*ScrollSmoothResponse, error)
	ScrollRelative(context.Context, *ScrollRelativeRequest) (*ScrollRelativeResponse, error)
	MilliSleep(context.Context, *MilliSleepRequest) (*MilliSleepResponse, error)
	Sleep(context.Context, *SleepRequest) (*SleepResponse, error)
	CaptureScreen(context.Context, *CaptureScreenRequest) (*CaptureScreenResponse, error)
	CaptureGo(context.Context, *CaptureGoRequest) (*CaptureGoResponse, error)
	CaptureImg(context.Context, *CaptureImgRequest) (*CaptureImgResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	DragSmooth(context.Context, *DragSmoothRequest) (*DragSmoothResponse, error)
	mustEmbedUnimplementedRobotGoServer()
}

// UnimplementedRobotGoServer must be embedded to have forward compatible implementations.
type UnimplementedRobotGoServer struct {
}

func (UnimplementedRobotGoServer) MoveSmooth(context.Context, *MoveSmoothRequest) (*MoveSmoothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSmooth not implemented")
}
func (UnimplementedRobotGoServer) MoveRelative(context.Context, *MoveRelativeRequest) (*MoveRelativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRelative not implemented")
}
func (UnimplementedRobotGoServer) MoveSmoothRelative(context.Context, *MoveSmoothRelativeRequest) (*MoveSmoothRelativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSmoothRelative not implemented")
}
func (UnimplementedRobotGoServer) GetMousePos(context.Context, *GetMousePosRequest) (*GetMousePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMousePos not implemented")
}
func (UnimplementedRobotGoServer) Click(context.Context, *ClickRequest) (*ClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}
func (UnimplementedRobotGoServer) Scroll(context.Context, *ScrollRequest) (*ScrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scroll not implemented")
}
func (UnimplementedRobotGoServer) ScrollMouse(context.Context, *ScrollMouseRequest) (*ScrollMouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrollMouse not implemented")
}
func (UnimplementedRobotGoServer) ScrollSmooth(context.Context, *ScrollSmoothRequest) (*ScrollSmoothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrollSmooth not implemented")
}
func (UnimplementedRobotGoServer) ScrollRelative(context.Context, *ScrollRelativeRequest) (*ScrollRelativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrollRelative not implemented")
}
func (UnimplementedRobotGoServer) MilliSleep(context.Context, *MilliSleepRequest) (*MilliSleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MilliSleep not implemented")
}
func (UnimplementedRobotGoServer) Sleep(context.Context, *SleepRequest) (*SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedRobotGoServer) CaptureScreen(context.Context, *CaptureScreenRequest) (*CaptureScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureScreen not implemented")
}
func (UnimplementedRobotGoServer) CaptureGo(context.Context, *CaptureGoRequest) (*CaptureGoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureGo not implemented")
}
func (UnimplementedRobotGoServer) CaptureImg(context.Context, *CaptureImgRequest) (*CaptureImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureImg not implemented")
}
func (UnimplementedRobotGoServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedRobotGoServer) DragSmooth(context.Context, *DragSmoothRequest) (*DragSmoothResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DragSmooth not implemented")
}
func (UnimplementedRobotGoServer) mustEmbedUnimplementedRobotGoServer() {}

// UnsafeRobotGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotGoServer will
// result in compilation errors.
type UnsafeRobotGoServer interface {
	mustEmbedUnimplementedRobotGoServer()
}

func RegisterRobotGoServer(s grpc.ServiceRegistrar, srv RobotGoServer) {
	s.RegisterService(&RobotGo_ServiceDesc, srv)
}

func _RobotGo_MoveSmooth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveSmoothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).MoveSmooth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/MoveSmooth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).MoveSmooth(ctx, req.(*MoveSmoothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_MoveRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).MoveRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/MoveRelative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).MoveRelative(ctx, req.(*MoveRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_MoveSmoothRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveSmoothRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).MoveSmoothRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/MoveSmoothRelative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).MoveSmoothRelative(ctx, req.(*MoveSmoothRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_GetMousePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMousePosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).GetMousePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/GetMousePos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).GetMousePos(ctx, req.(*GetMousePosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/Click",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).Click(ctx, req.(*ClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_Scroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).Scroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/Scroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).Scroll(ctx, req.(*ScrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_ScrollMouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrollMouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).ScrollMouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/ScrollMouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).ScrollMouse(ctx, req.(*ScrollMouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_ScrollSmooth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrollSmoothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).ScrollSmooth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/ScrollSmooth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).ScrollSmooth(ctx, req.(*ScrollSmoothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_ScrollRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrollRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).ScrollRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/ScrollRelative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).ScrollRelative(ctx, req.(*ScrollRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_MilliSleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MilliSleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).MilliSleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/MilliSleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).MilliSleep(ctx, req.(*MilliSleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).Sleep(ctx, req.(*SleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_CaptureScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).CaptureScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/CaptureScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).CaptureScreen(ctx, req.(*CaptureScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_CaptureGo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureGoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).CaptureGo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/CaptureGo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).CaptureGo(ctx, req.(*CaptureGoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_CaptureImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).CaptureImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/CaptureImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).CaptureImg(ctx, req.(*CaptureImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotGo_DragSmooth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DragSmoothRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotGoServer).DragSmooth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RobotGo/DragSmooth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotGoServer).DragSmooth(ctx, req.(*DragSmoothRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotGo_ServiceDesc is the grpc.ServiceDesc for RobotGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.RobotGo",
	HandlerType: (*RobotGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveSmooth",
			Handler:    _RobotGo_MoveSmooth_Handler,
		},
		{
			MethodName: "MoveRelative",
			Handler:    _RobotGo_MoveRelative_Handler,
		},
		{
			MethodName: "MoveSmoothRelative",
			Handler:    _RobotGo_MoveSmoothRelative_Handler,
		},
		{
			MethodName: "GetMousePos",
			Handler:    _RobotGo_GetMousePos_Handler,
		},
		{
			MethodName: "Click",
			Handler:    _RobotGo_Click_Handler,
		},
		{
			MethodName: "Scroll",
			Handler:    _RobotGo_Scroll_Handler,
		},
		{
			MethodName: "ScrollMouse",
			Handler:    _RobotGo_ScrollMouse_Handler,
		},
		{
			MethodName: "ScrollSmooth",
			Handler:    _RobotGo_ScrollSmooth_Handler,
		},
		{
			MethodName: "ScrollRelative",
			Handler:    _RobotGo_ScrollRelative_Handler,
		},
		{
			MethodName: "MilliSleep",
			Handler:    _RobotGo_MilliSleep_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _RobotGo_Sleep_Handler,
		},
		{
			MethodName: "CaptureScreen",
			Handler:    _RobotGo_CaptureScreen_Handler,
		},
		{
			MethodName: "CaptureGo",
			Handler:    _RobotGo_CaptureGo_Handler,
		},
		{
			MethodName: "CaptureImg",
			Handler:    _RobotGo_CaptureImg_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _RobotGo_Move_Handler,
		},
		{
			MethodName: "DragSmooth",
			Handler:    _RobotGo_DragSmooth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robotgo.proto",
}
